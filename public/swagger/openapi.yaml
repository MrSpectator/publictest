openapi: 3.0.3
info:
  title: isalesbookv2 API
  version: 1.0.0
  description: |
    API and documentation for isalesbookv2 modular monolith (Email, Logger, Registration)
  contact:
    email: admin@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8000
    description: Local API server
  - url: http://backend-v2.isalesbook.com
    description: Production API server

paths:
  # /api/ping:
  #   get:
  #     summary: Health check (no DB)
  #     tags: [System]
  #     responses:
  #       '200':
  #         description: Pong
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 status:
  #                   type: string
  #                   example: pong
  #                 timestamp:
  #                   type: string
  #                   format: date-time
  #                 version:
  #                   type: string
  #                 app_name:
  #                   type: string

  # /api/health:
  #   get:
  #     summary: Health check (with DB)
  #     tags: [System]
  #     responses:
  #       '200':
  #         description: Health status
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 status:
  #                   type: string
  #                 timestamp:
  #                   type: string
  #                   format: date-time
  #                 version:
  #                   type: string
  #                 app_name:
  #                   type: string
  #                 database:
  #                   type: string
  #                 modules:
  #                   type: object

  /api/info:
    get:
      summary: API info
      tags: [System]
      responses:
        '200':
          description: API info
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  version:
                    type: string
                  modules:
                    type: object
                  documentation:
                    type: string

  /api/email/send:
    post:
      summary: Send an email
      tags: [Email]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [to, subject, body]
              properties:
                to:
                  type: string
                  format: email
                  example: "recipient@example.com"
                subject:
                  type: string
                  example: "Test Email Subject"
                body:
                  type: string
                  example: "This is the email body content"
                cc:
                  type: string
                  example: "cc1@example.com,cc2@example.com"
                  description: "Comma-separated email addresses"
                bcc:
                  type: string
                  example: "bcc1@example.com,bcc2@example.com"
                  description: "Comma-separated email addresses"
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: "Email attachments (jpg, jpeg, png, pdf, doc, docx, txt, max 10MB each)"
      responses:
        '200':
          description: Email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  from_email:
                    type: string
                    example: "sender@example.com"
                  to_email:
                    type: string
                    example: "recipient@example.com"
                  subject:
                    type: string
                    example: "Test Email Subject"
                  status:
                    type: string
                    enum: [pending, sent, failed]
                    example: "sent"
                  attempts:
                    type: integer
                    example: 1
                  sent_at:
                    type: string
                    format: date-time
                    nullable: true
                  error_message:
                    type: string
                    nullable: true
                  created_at:
                    type: string
                    format: date-time
        '422':
          description: Validation error
        '500':
          description: Email sending failed

  /api/email/logs:
    get:
      summary: Get email logs
      tags: [Email]
      parameters:
        - name: status
          in: query
          description: Filter by status
          required: false
          schema:
            type: string
            enum: [pending, sent, failed]
        - name: to_email
          in: query
          description: Filter by recipient email
          required: false
          schema:
            type: string
            format: email
        - name: from_date
          in: query
          description: Filter by start date
          required: false
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          description: Filter by end date
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Email logs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    from_email:
                      type: string
                      example: "sender@example.com"
                    to_email:
                      type: string
                      example: "recipient@example.com"
                    cc:
                      type: array
                      items:
                        type: string
                      nullable: true
                    bcc:
                      type: array
                      items:
                        type: string
                      nullable: true
                    subject:
                      type: string
                      example: "Test Email Subject"
                    body:
                      type: string
                      example: "This is the email body content"
                    status:
                      type: string
                      enum: [pending, sent, failed]
                      example: "sent"
                    attempts:
                      type: integer
                      example: 1
                    sent_at:
                      type: string
                      format: date-time
                      nullable: true
                    error_message:
                      type: string
                      nullable: true
                    attachments:
                      type: array
                      items:
                        type: string
                      nullable: true
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time

  /api/logger/log:
    post:
      summary: Create a new log entry
      tags: [Logger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [level, message]
              properties:
                level:
                  type: string
                  enum: [emergency, alert, critical, error, warning, notice, info, debug]
                category:
                  type: string
                  enum: [authentication, api, database, email, system, security, performance, user_action]
                message:
                  type: string
                context:
                  type: object
                metadata:
                  type: object
      responses:
        '201':
          description: Log entry created
          content:
            application/json:
              schema:
                type: object

  /api/logger/emergency:
    post:
      summary: Log emergency message
      tags: [Logger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                context:
                  type: object
                metadata:
                  type: object
      responses:
        '201':
          description: Emergency log created

  /api/logger/alert:
    post:
      summary: Log alert message
      tags: [Logger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                context:
                  type: object
                metadata:
                  type: object
      responses:
        '201':
          description: Alert log created

  /api/logger/critical:
    post:
      summary: Log critical message
      tags: [Logger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                context:
                  type: object
                metadata:
                  type: object
      responses:
        '201':
          description: Critical log created

  /api/logger/error:
    post:
      summary: Log error message
      tags: [Logger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                context:
                  type: object
                metadata:
                  type: object
      responses:
        '201':
          description: Error log created

  /api/logger/warning:
    post:
      summary: Log warning message
      tags: [Logger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                context:
                  type: object
                metadata:
                  type: object
      responses:
        '201':
          description: Warning log created

  /api/logger/notice:
    post:
      summary: Log notice message
      tags: [Logger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                context:
                  type: object
                metadata:
                  type: object
      responses:
        '201':
          description: Notice log created

  /api/logger/info:
    post:
      summary: Log info message
      tags: [Logger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                context:
                  type: object
                metadata:
                  type: object
      responses:
        '201':
          description: Info log created

  /api/logger/debug:
    post:
      summary: Log debug message
      tags: [Logger]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                context:
                  type: object
                metadata:
                  type: object
      responses:
        '201':
          description: Debug log created

  /api/logger/logs:
    get:
      summary: Get logs with filters
      tags: [Logger]
      parameters:
        - in: query
          name: level
          schema:
            type: string
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: start_date
          schema:
            type: string
            format: date
        - in: query
          name: end_date
          schema:
            type: string
            format: date
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Logs retrieved
          content:
            application/json:
              schema:
                type: object

  /api/logger/logs/{id}:
    get:
      summary: Get a specific log entry
      tags: [Logger]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Log entry retrieved
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Log entry not found

    delete:
      summary: Delete a log entry
      tags: [Logger]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Log entry deleted
        '404':
          description: Log entry not found

  /api/logger/statistics:
    get:
      summary: Get log statistics
      tags: [Logger]
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
        - in: query
          name: end_date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Statistics retrieved
          content:
            application/json:
              schema:
                type: object

  /api/logger/levels:
    get:
      summary: Get available log levels
      tags: [Logger]
      responses:
        '200':
          description: Log levels retrieved
          content:
            application/json:
              schema:
                type: object

  /api/logger/categories:
    get:
      summary: Get available log categories
      tags: [Logger]
      responses:
        '200':
          description: Log categories retrieved
          content:
            application/json:
              schema:
                type: object

  /api/logger/clean:
    post:
      summary: Clean old logs
      tags: [Logger]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                days:
                  type: integer
                  default: 30
      responses:
        '200':
          description: Old logs cleaned
          content:
            application/json:
              schema:
                type: object

  /api/registration/register:
    post:
      summary: Register a new user
      description: |
        Register a new user (individual or company). After successful registration, a verification email is sent to the user containing their organization code and verification link. The user must verify their email to activate their account.
      tags: [Registration]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: Individual Registration
                  type: object
                  required:
                    - first_name
                    - last_name
                    - email
                    - phone_number
                    - company_address
                    - company_url
                    - country_id
                    - state_id
                    - company_name
                    - password
                    - password_confirmation
                    - type
                  properties:
                    first_name:
                      type: string
                    last_name:
                      type: string
                    email:
                      type: string
                      format: email
                    phone_number:
                      type: string
                    company_address:
                      type: string
                    company_url:
                      type: string
                    country_id:
                      type: integer
                    state_id:
                      type: integer
                    company_name:
                      type: string
                    password:
                      type: string
                      minLength: 8
                    password_confirmation:
                      type: string
                    type:
                      type: integer
                      enum: [1]
                - title: Company Registration
                  type: object
                  required:
                    - company_name
                    - company_contact_person
                    - company_contact_number
                    - email
                    - company_address
                    - company_url
                    - country_id
                    - state_id
                    - password
                    - password_confirmation
                    - type
                  properties:
                    company_name:
                      type: string
                    company_contact_person:
                      type: string
                    company_contact_number:
                      type: string
                    email:
                      type: string
                      format: email
                    company_address:
                      type: string
                    company_url:
                      type: string
                    country_id:
                      type: integer
                    state_id:
                      type: integer
                    password:
                      type: string
                      minLength: 8
                    password_confirmation:
                      type: string
                    type:
                      type: integer
                      enum: [2]
      responses:
        '201':
          description: User registered. A verification email is sent to the user with their organization code and verification link.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                  message:
                    type: string
                    example: "Registration successful. Please check your email for a verification link and your organization code."

  /api/registration/verify-email:
    post:
      summary: Verify email with token
      description: |
        Verify a user's email address using the token sent in the verification email. The verification email contains the user's organization code and a verification link. Required for account activation.
      tags: [Registration]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid or expired token

  /api/registration/resend-verification:
    post:
      summary: Resend verification email
      description: |
        Resend the verification email to the user. The email contains the organization code and verification link.
      tags: [Registration]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Verification email resent
          content:
            application/json:
              schema:
                type: object

  /api/registration/forgot-password:
    post:
      summary: Send password reset email
      description: |
        Send a password reset email to the user. The email is styled and contains a secure reset link.
      tags: [Registration]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object

  /api/registration/reset-password:
    post:
      summary: Reset password
      tags: [Registration]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, password, password_confirmation]
              properties:
                token:
                  type: string
                password:
                  type: string
                  minLength: 8
                password_confirmation:
                  type: string
      responses:
        '200':
          description: Password reset
          content:
            application/json:
              schema:
                type: object

  /api/registration/check-availability:
    get:
      summary: Check availability of email, username, or phone
      tags: [Registration]
      parameters:
        - in: query
          name: email
          schema:
            type: string
            format: email
        - in: query
          name: username
          schema:
            type: string
        - in: query
          name: phone
          schema:
            type: string
      responses:
        '200':
          description: Availability checked
          content:
            application/json:
              schema:
                type: object

  /api/registration/genders:
    get:
      summary: Get available genders
      tags: [Registration]
      responses:
        '200':
          description: Genders retrieved
          content:
            application/json:
              schema:
                type: object

  /api/registration/sources:
    get:
      summary: Get available registration sources
      tags: [Registration]
      responses:
        '200':
          description: Sources retrieved
          content:
            application/json:
              schema:
                type: object

  /api/registration/statistics:
    get:
      summary: Get registration statistics
      tags: [Registration]
      responses:
        '200':
          description: Statistics retrieved
          content:
            application/json:
              schema:
                type: object

  /api/registration/profile:
    get:
      summary: Get user profile
      tags: [Registration]
      responses:
        '200':
          description: Profile retrieved
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized
    put:
      summary: Update user profile
      tags: [Registration]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                username:
                  type: string
                phone:
                  type: string
                date_of_birth:
                  type: string
                  format: date
                gender:
                  type: string
                  enum: [male, female, other, prefer_not_to_say]
                bio:
                  type: string
                website:
                  type: string
                  format: url
                location:
                  type: string
                timezone:
                  type: string
                language:
                  type: string
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                type: object
        '422':
          description: Validation error

  /api/registration/change-password:
    post:
      summary: Change user password
      tags: [Registration]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [current_password, new_password, new_password_confirmation]
              properties:
                current_password:
                  type: string
                new_password:
                  type: string
                  minLength: 8
                new_password_confirmation:
                  type: string
      responses:
        '200':
          description: Password changed
          content:
            application/json:
              schema:
                type: object
        '422':
          description: Validation error

  /api/registration/users:
    get:
      summary: Search users (Admin only)
      tags: [Registration]
      parameters:
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
        - in: query
          name: verified
          schema:
            type: string
            enum: [yes, no]
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Users retrieved
          content:
            application/json:
              schema:
                type: object 